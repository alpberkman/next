When implementing the outer interpreter have a mechaism for catching sigkill (Ctrl+C).

Consider adding linenoise or editline or
write your own that can also traverse the 'last'
the lp pointer already points to the variable that holds the last word,
use it to traverse and find the matching words, find the longest matching part
use to array
stub[32] -> what is typed so far
found[32] -> longest matching prefix
if word is immediate make it red?


use cpp for words you dont want in the dictionary
#define on true, strc
#define off false, strc
...

NEST and NEXT colon words are never used
maybe special colon words to push them to the stack
or
when preparing eval
here, NEST, strc


https://viewsourcecode.org/snaptoken/kilo/03.rawInputAndOutput.html

mmap shmget shmat


led can also open, read and write files to next
-> even though the interpreter only has getchar() in the start
you can use a file to start it without cat

\ Need EVAL POSTPONE COMPILE [COMPILE] ' ['] EXECUTE strings [CHAR] CREATE DOES> CONSTANT VARIABLE

miniMAL word set += ALLOT POSTPONE  ." TYPE EXPECT [CHAR] [']

relative jumps
over sub swap !



jmp to BRANCH ?BRANCH

: ?LEAVE IF LEAVE THEN ;


Object ( -- addr )
Func ( addr -- ??? )
-> More flexible ?

or

Func ( -- fun-enum )
Object ( fun-enum -- ??? )




Not implementing the following:
D+ DNEGATE UM/MOD M/MOD /MOD UM* M* */MOD */ > CHAR 2! 2@ PAD TIB @EXECUTE




Transpiler:
VM, real HW agnostic, CELL_SIZE agnostic

Language Charasteristics:
- Size: cell, byte, double
- Literals: how to truncate bigger numbers or expand them
- Addresses: should be simple, use an array or lookup them every time?
- Allignment of code field
- Allignment of link field
- Size change of code field
+ Extra functions for full compatibility

==> Should work for 16, 32, 64 bit vm with byte code ITC
==> Should work for 16, 32, 64 bit with real ITC
==> Should work for native int size (VOID* == MEM* == FUNC*)


Important Sizes
TYPE,               CELL_SIZE,      BYTE_SIZE,      DOUBLE_SIZE,    FUNC_SIZE,      ITC_SIZE,       MEMPTR_SIZE
byte code ITC VM,   sizeof(cell),   sizeof(byte),   CELL_SIZE*2,    sizeof(func),   BYTE_SIZE,      CELL_SIZE (indexed)
ITC VM,             sizeof(cell),   sizeof(byte),   CELL_SIZE*2,    sizeof(func),   sizeof(func),   CELL_SIZE (indexed)
NATIVE ITC,         native_int,     sizeof(byte),   CELL_SIZE*2,    sizeof(func),   sizeof(func),   sizeof(void *)
=========>,         int64_t,        unsigned char,  int128_t,       func,           func,           void*

#define UINT128(hi, lo) (((__uint128_t) (hi)) << 64 | (lo))












































